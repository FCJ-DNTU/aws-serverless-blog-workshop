[
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Workshop: Triển Khai Website Blog Serverless Trên AWS Với Lambda, API Gateway, DynamoDB, S3 \u0026amp; CloudFront Trong workshop này, bạn sẽ học cách triển khai một Website Blog Serverless trên AWS, sử dụng AWS Lambda để xử lý logic backend, API Gateway để tạo API RESTful, DynamoDB làm cơ sở dữ liệu NoSQL, S3 để host frontend tĩnh (React/Vite), và CloudFront để tối ưu hiệu suất phân phối nội dung.\nMục tiêu: Hiểu cách thiết kế và triển khai ứng dụng serverless trên AWS. Tạo và cấu hình Lambda functions, API Gateway, DynamoDB, S3, và CloudFront. Triển khai ứng dụng frontend React/Vite trên S3. Kết nối frontend với backend qua API Gateway. Quản lý quyền truy cập giữa các dịch vụ bằng AWS IAM. Tối ưu chi phí với Free Tier và dọn dẹp tài nguyên. Yêu cầu: Tài khoản AWS với quyền truy cập IAM (Free Tier: https://aws.amazon.com/free). Kỹ năng JavaScript (Node.js) cơ bản. Công cụ: Node.js, npm, AWS CLI, Git. (Tùy chọn) Postman để test API. Kiến thức được cung cấp trong Workshop Các dịch vụ AWS và chi phí:\n1. AWS Lambda Công dụng:\nAWS Lambda được sử dụng để chạy các hàm backend (getPosts, createPost) xử lý logic lấy và tạo bài viết. Lambda hoạt động theo mô hình serverless, tự động mở rộng và chỉ tính phí khi có yêu cầu. Chi phí:\nTrạng thái Loại Chi phí/yêu cầu Chi phí/tháng Free Tier 1M yêu cầu miễn phí, 400,000 GB-giây $0.00 $0.00 Hết Free Tier $0.20/1M yêu cầu, $0.0000167/GB-giây ~$0.01 (100K yêu cầu) ~$0.30 (100K yêu cầu) 2. Amazon API Gateway Công dụng:\nAPI Gateway tạo các endpoint HTTP (GET /posts, POST /posts) để kết nối frontend với Lambda. Hỗ trợ RESTful API, quản lý yêu cầu và tích hợp với Lambda. Chi phí:\nTrạng thái Loại Chi phí/yêu cầu Chi phí/tháng Free Tier 1M yêu cầu miễn phí $0.00 $0.00 Hết Free Tier $3.50/1M yêu cầu ~$0.35 (100K yêu cầu) ~$10.50 (3M yêu cầu) 3. Amazon DynamoDB Công dụng:\nDynamoDB là cơ sở dữ liệu NoSQL để lưu trữ và quản lý dữ liệu bài viết (bảng BlogPosts). Hỗ trợ đọc/ghi nhanh và tự động mở rộng. Chi phí:\nTrạng thái Loại Chi phí/ngày Chi phí/tháng Free Tier 25 đơn vị đọc/ghi, 25GB lưu trữ $0.00 $0.00 Hết Free Tier $1.25/1M đơn vị đọc, $0.25/1M đơn vị ghi, $0.09/GB ~$0.02 (10K đọc/ghi, 5GB) ~$0.60 (10K đọc/ghi, 5GB) 4. Amazon S3 Công dụng:\nS3 lưu trữ tệp tĩnh của frontend React/Vite (HTML, CSS, JS, hình ảnh). Hỗ trợ hosting website tĩnh. Chi phí:\nTrạng thái Dung lượng Chi phí/ngày Chi phí/tháng Free Tier 5GB lưu trữ, 2,000 GET, 20,000 PUT $0.00 $0.00 Hết Free Tier $0.023/GB, $0.005/1,000 GET ~$0.03 (5GB, 10K GET) ~$1.00 (5GB, 10K GET) 5. Amazon CloudFront Công dụng:\nCloudFront là CDN giúp phân phối nội dung từ S3 với tốc độ cao và HTTPS. Giảm tải trực tiếp từ S3 và cải thiện trải nghiệm người dùng. Chi phí:\nTrạng thái Dung lượng Chi phí/ngày Chi phí/tháng Free Tier 1TB băng thông, 10M yêu cầu $0.00 $0.00 Hết Free Tier $0.085/GB, $0.01/10,000 yêu cầu ~$0.10 (50GB, 100K yêu cầu) ~$3.00 (50GB, 100K yêu cầu) 6. IAM Công dụng:\nIAM quản lý quyền truy cập cho Lambda, API Gateway, và DynamoDB. Đảm bảo bảo mật bằng cách cấp quyền cụ thể (ví dụ: dynamodb:Scan, dynamodb:PutItem). Chi phí:\nMiễn phí theo AWS. 7. Tổng hợp chi phí\n7.1. Chi phí khi còn Free Tier\nDịch vụ Loại Chi phí/ngày Chi phí/tháng AWS Lambda 1M yêu cầu $0.00 $0.00 Amazon API Gateway 1M yêu cầu $0.00 $0.00 Amazon DynamoDB 25 đơn vị đọc/ghi $0.00 $0.00 Amazon S3 5GB lưu trữ $0.00 $0.00 Amazon CloudFront 1TB băng thông $0.00 $0.00 IAM Miễn phí $0.00 $0.00 Tổng cộng $0.00 $0.00 7.2. Chi phí khi hết Free Tier\nDịch vụ Loại Chi phí/ngày Chi phí/tháng AWS Lambda 100K yêu cầu ~$0.01 ~$0.30 Amazon API Gateway 3M yêu cầu ~$0.35 ~$10.50 Amazon DynamoDB 10K đọc/ghi, 5GB ~$0.02 ~$0.60 Amazon S3 5GB, 10K GET ~$0.03 ~$1.00 Amazon CloudFront 50GB, 100K yêu cầu ~$0.10 ~$3.00 IAM Miễn phí $0.00 $0.00 Tổng cộng ~$0.51 ~$15.40 8. Kết luận\nKhi còn trong Free Tier, hệ thống hoạt động với chi phí $0. Khi Free Tier hết hạn, chi phí duy trì hệ thống sẽ dao động khoảng $15 - $16/tháng (với giả định 100K yêu cầu Lambda, 3M yêu cầu API Gateway, 10K đọc/ghi DynamoDB, 5GB S3, 50GB CloudFront). Nếu hệ thống mở rộng, chi phí có thể tăng tùy theo lưu lượng truy cập và dữ liệu. Luồng hoạt động: 1. Client truy cập trang web\nNgười dùng truy cập blog qua trình duyệt. Nội dung tĩnh (React/Vite) được lưu trên S3 và phân phối qua CloudFront. 2. CloudFront tiếp nhận request\nCloudFront phục vụ nội dung tĩnh từ S3 (HTML, CSS, JS). Chuyển tiếp các yêu cầu API (GET /posts, POST /posts) đến API Gateway. 3. API Gateway xử lý request\nAPI Gateway nhận yêu cầu từ CloudFront và chuyển đến Lambda functions (getPosts hoặc createPost). Lambda xử lý logic backend. 4. Lambda truy vấn DynamoDB\nLambda function getPosts gọi DynamoDB để lấy danh sách bài viết. Lambda function createPost lưu bài viết mới vào DynamoDB. 5. Trả kết quả về client\nLambda trả kết quả qua API Gateway. API Gateway gửi response về CloudFront. CloudFront có thể cache response để tối ưu tốc độ. Response được gửi đến client qua trình duyệt. 6. Quản lý quyền truy cập bằng IAM\nIAM kiểm soát quyền truy cập cho Lambda (ví dụ: dynamodb:Scan, dynamodb:PutItem). Đảm bảo bảo mật giữa các dịch vụ AWS. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/",
	"title": "Workshop: Triển Khai Website Blog Serverless Trên AWS Với Lambda, API Gateway, DynamoDB, S3 &amp; CloudFront",
	"tags": [],
	"description": "",
	"content": "Workshop: Triển Khai Website Blog Serverless Trên AWS Với Lambda, API Gateway, DynamoDB, S3 \u0026amp; CloudFront Tổng quan Trong workshop này, bạn sẽ học cách triển khai một Website Blog Serverless trên AWS, sử dụng AWS Lambda để xử lý logic backend, API Gateway để tạo API RESTful, DynamoDB làm cơ sở dữ liệu NoSQL, S3 để host frontend tĩnh (React/Vite), và CloudFront để tối ưu hiệu suất phân phối nội dung.\nMục tiêu: Hiểu cách thiết kế và triển khai ứng dụng serverless trên AWS. Tạo và cấu hình Lambda functions, API Gateway, DynamoDB, S3, và CloudFront. Biết cách triển khai ứng dụng frontend React/Vite trên S3. Kết nối frontend với backend thông qua API Gateway. Quản lý quyền truy cập giữa các dịch vụ bằng AWS IAM. Dọn dẹp tài nguyên để tối ưu chi phí. Yêu cầu: Tài khoản AWS với quyền truy cập IAM (Free Tier: https://aws.amazon.com/free). Kỹ năng JavaScript (Node.js) cơ bản. Công cụ: Node.js, npm, AWS CLI, Git, và trình duyệt web. (Tùy chọn) Postman để test API. Nội dung Giới thiệu Thiết lập tài khoản AWS và quyền IAM Tạo bảng DynamoDB Tạo Lambda Functions Cấu hình API Gateway Chuẩn bị ứng dụng Frontend Host Frontend trên S3 Cấu hình CloudFront Dọn dẹp tài nguyên "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/2-set-up-aws-account-and-iam-permissions/",
	"title": "Thiết lập tài khoản AWS và quyền IAM",
	"tags": [],
	"description": "",
	"content": " Best practice: Hạn chế sử dụng Root User. Thay vào đó, hãy tạo IAM Role với quyền tối thiểu cho Lambda để truy cập DynamoDB, đảm bảo bảo mật và dễ quản lý.\nTrong section này, chúng ta sẽ tạo IAM Role và Policy để cho phép Lambda functions (getPosts và createPost) tương tác với bảng BlogPosts trong DynamoDB, giới hạn trong region us-east-1 (hoặc region bạn chọn).\n1. Truy cập AWS IAM Management Console Đăng nhập vào AWS Management Console. Truy cập IAM Console 2. Tạo Custom Policy 2.1. Tại thanh điều hướng bên trái, chọn Policies\n2.2. Tại giao diện Policies, chọn Create policy.\n2.3. Bước 1 - Specify permissions\nChọn JSON tab và dán JSON bên dưới vào Policy Editor, sau đó chọn Next:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:Scan\u0026#34;, \u0026#34;dynamodb:PutItem\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:us-east-1:*:table/BlogPosts\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;aws:RequestedRegion\u0026#34;: \u0026#34;us-east-1\u0026#34; } } }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Policy này cho phép Lambda thực hiện dynamodb:Scan (lấy bài viết) và dynamodb:PutItem (tạo bài viết) trên bảng BlogPosts trong region us-east-1. Quyền CloudWatch Logs (logs:*) cho phép Lambda ghi log.\n3. Tạo IAM Role cho Lambda IAM Role được gán cho Lambda functions để cấp quyền truy cập. Policy lambda-dynamodb-access sẽ được gắn vào role này.\n3.1. Truy cập Roles trong IAM Console 3.2. Chọn Create role 3.3. Trong giao diện Create role: Chọn AWS service làm Trusted entity type Chọn Lambda trong Use case Chọn Next\n3.4. Trong Add permissions: Tìm và chọn policy lambda-dynamodb-access (Tuỳ chọn) Thêm AWSLambdaBasicExecutionRole để bổ sung quyền CloudWatch Logs cơ bản Chọn Next\n3.5. Trong Name, review, and create: Role name: lambda-blog-role Description: Role for Lambda to access DynamoDB BlogPosts table Chọn Create role\n4. Gán IAM Role cho Lambda Functions 4.1. Truy cập Lambda Console 4.2. Mở function getPosts: Đi tới Configuration → Permissions Trong Execution role, chọn Edit Chọn Existing role → lambda-blog-role Chọn Save\n4.3. Lặp lại bước 4.2 cho function createPost 4.4. Kiểm tra quyền: Trong IAM Console, mở role lambda-blog-role Đảm bảo policy lambda-dynamodb-access đã được gắn Xác minh ARN của bảng BlogPosts trong policy khớp với bảng DynamoDB của bạn (vd: arn:aws:dynamodb:us-east-1::table/BlogPosts)\n5. Kiểm tra IAM Role với Lambda 5.1. Đăng nhập bằng IAM User (không dùng Root User) 5.2. Test function getPosts trong Lambda Console: Đi tới tab Test, tạo event với {} Nhấn Test Kết quả mong đợi:\n{ \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: \u0026#34;[]\u0026#34;, \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; } } (hoặc danh sách bài viết nếu bảng BlogPosts có dữ liệu).\n5.3. Nếu gặp lỗi (vd: AccessDenied): Kiểm tra CloudWatch Logs Đảm bảo ARN trong policy khớp với bảng DynamoDB Xác minh region = us-east-1 và biến môi trường TABLE_NAME=BlogPosts\nHoàn thành! Bạn đã tạo IAM Role và Policy cho Lambda functions để truy cập DynamoDB.\n"
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/3-create-dynamodb-table/",
	"title": "Chuẩn bị DynamoDB",
	"tags": [],
	"description": "",
	"content": "Ở section này, chúng ta sẽ tạo bảng DynamoDB đồng thời thêm dữ liệu mẫu Kiểm tra bảng, Kiểm tra truy vấn và Hiểu cấu trúc dữ liệu.\nNội dung:\n3.1. Tạo bảng DynamoDB 3.2. Thêm dữ liệu mẫu "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/3-create-dynamodb-table/3.1-create-dynamodb-table/",
	"title": "Tạo bảng DynamoDB",
	"tags": [],
	"description": "",
	"content": "DynamoDB là gì? Amazon DynamoDB là một cơ sở dữ liệu NoSQL serverless, cung cấp khả năng lưu trữ và truy xuất dữ liệu với hiệu suất cao, tự động mở rộng, và tích hợp tốt với các dịch vụ AWS như Lambda.\nVì sao cần tạo bảng DynamoDB? Lưu trữ dữ liệu bài viết: Tạo bảng BlogPosts để lưu thông tin như ID, tiêu đề, nội dung, và ngày tạo của bài viết. Hỗ trợ serverless: DynamoDB không cần quản lý máy chủ, phù hợp với kiến trúc Lambda và API Gateway. Hiệu suất cao: Đảm bảo truy vấn nhanh và tự động điều chỉnh theo lưu lượng truy cập. Các bước thực hiện: Truy cập AWS Management Console. Chọn dịch vụ Amazon DynamoDB. Trong menu điều hướng, chọn Tables Chọn Create table. Trong giao diện Create table: Table name: Nhập BlogPosts. Partition key: Nhập postId (loại String) làm khóa chính để xác định duy nhất mỗi bài viết. Settings: Chọn Default settings (chế độ On-demand, phù hợp với Free Tier). Nhấn Create table. Kiểm tra bảng: Sau khi tạo, bảng BlogPosts sẽ xuất hiện trong danh sách Tables với trạng thái Active. Đảm bảo tên bảng là BlogPosts, vì Lambda functions (getPosts, createPost) sẽ sử dụng tên này trong environment variable TABLE_NAME. Tạo bảng trong cùng region với Lambda functions (ví dụ: us-east-1). IAM Role của Lambda cần quyền dynamodb:Scan và dynamodb:PutItem (đã cấu hình ở bước trước). Hoàn thành Bạn đã tạo bảng BlogPosts để lưu trữ dữ liệu bài viết. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/4-create-lambda-functions/",
	"title": "Tạo Lambda Functions",
	"tags": [],
	"description": "",
	"content": "AWS Lambda AWS Lambda là một dịch vụ serverless cho phép chạy mã mà không cần quản lý máy chủ. Nó tự động mở rộng theo lưu lượng truy cập và chỉ tính phí khi mã được thực thi, rất phù hợp cho các ứng dụng như API backend.\nLambda Function là gì? Lambda Function là một đoạn mã (viết bằng Node.js, Python, v.v.) được triển khai trên AWS Lambda để xử lý các tác vụ cụ thể, như truy xuất dữ liệu từ DynamoDB hoặc xử lý yêu cầu API.\nMô hình triển khai Lambda trong Workshop Trong workshop này, chúng ta sẽ tạo hai Lambda functions:\ngetPosts: Truy xuất danh sách bài viết từ bảng BlogPosts trong DynamoDB. createPost: Thêm bài viết mới vào bảng BlogPosts. Các functions này sẽ: Tích hợp với API Gateway để xử lý yêu cầu HTTP. Sử dụng IAM Role (đã tạo ở bước trước) để truy cập DynamoDB. Được viết bằng Node.js với AWS SDK v3. Lý do chọn Lambda: Serverless: Không cần quản lý máy chủ, giảm chi phí vận hành. Chi phí thấp: Free Tier cung cấp 1 triệu yêu cầu miễn phí mỗi tháng, phù hợp cho thử nghiệm. Tích hợp dễ dàng: Hoạt động tốt với API Gateway và DynamoDB. Lý do chọn Node.js: Phổ biến: Hỗ trợ tốt cho các ứng dụng web và serverless. AWS SDK v3: Cung cấp các module nhẹ (như @aws-sdk/client-dynamodb) để tối ưu hiệu suất. Cộng đồng lớn: Dễ tìm tài liệu và thư viện hỗ trợ. Tạo Lambda Functions 1. Truy cập AWS Console Mở trình duyệt và truy cập vào Lambda Console 2. Tạo function getPosts Trong Lambda Dashboard, chọn Create function. 3. Cấu hình function Trong phần Create function: Function name: Nhập getPosts. Runtime: Chọn Node.js 20.x. Role: Chọn Use an existing role và chọn lambda-blog-role (đã tạo ở bước IAM). Nhấn Create function. 4. Thêm mã cho getPosts Trong giao diện function, chọn tab Code. Thay mã mặc định trong index.mjs bằng mã sau: import { DynamoDBClient, ScanCommand } from \u0026#39;@aws-sdk/client-dynamodb\u0026#39;; const dynamodb = new DynamoDBClient({}); export const handler = async () =\u0026gt; { const params = { TableName: process.env.TABLE_NAME }; try { const data = await dynamodb.send(new ScanCommand(params)); return { statusCode: 200, body: JSON.stringify(data.Items || []), headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; } }; } catch (err) { console.error(\u0026#39;Error:\u0026#39;, err); return { statusCode: 500, body: JSON.stringify({ error: \u0026#39;Could not retrieve posts\u0026#39; }) }; } }; Thêm environment variable: Trong tab Configuration → Environment variables, chọn Edit. Thêm: TABLE_NAME = BlogPosts. Nhấn Save.\n5. Tạo function createPost Lặp lại bước 2-3 để tạo function mới với: Function name: createPost. Runtime: Node.js 20.x. Role: lambda-blog-role.\nThay mã trong index.mjs bằng:\nimport { DynamoDBClient, PutItemCommand } from \u0026#39;@aws-sdk/client-dynamodb\u0026#39;;\rimport { marshall } from \u0026#39;@aws-sdk/util-dynamodb\u0026#39;;\rconst dynamodb = new DynamoDBClient({});\rexport const handler = async (event) =\u0026gt; {\rconst body = JSON.parse(event.body || \u0026#39;{}\u0026#39;);\rconst params = {\rTableName: process.env.TABLE_NAME,\rItem: marshall({\rpostId: body.postId || Date.now().toString(),\rtitle: body.title || \u0026#39;Untitled\u0026#39;,\rcontent: body.content || \u0026#39;\u0026#39;,\rcreatedAt: new Date().toISOString()\r})\r};\rtry {\rawait dynamodb.send(new PutItemCommand(params));\rreturn {\rstatusCode: 200,\rbody: JSON.stringify({ message: \u0026#39;Post created successfully\u0026#39; }),\rheaders: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }\r};\r} catch (err) {\rconsole.error(\u0026#39;Error:\u0026#39;, err);\rreturn {\rstatusCode: 500,\rbody: JSON.stringify({ error: \u0026#39;Could not create post\u0026#39; })\r};\r}\r}; Thêm environment variable TABLE_NAME = BlogPosts như bước 4.\n6. Cấu hình package.json Để thêm dependency @aws-sdk/client-dynamodb và @aws-sdk/util-dynamodb, tạo file package.json trong thư mục mã nguồn:\n{\r\u0026#34;name\u0026#34;: \u0026#34;lambda-blog\u0026#34;,\r\u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;,\r\u0026#34;dependencies\u0026#34;: {\r\u0026#34;@aws-sdk/client-dynamodb\u0026#34;: \u0026#34;^3.0.0\u0026#34;,\r\u0026#34;@aws-sdk/util-dynamodb\u0026#34;: \u0026#34;^3.0.0\u0026#34;\r}\r} Đóng gói mã: Tạo thư mục cục bộ cho mỗi function (ví dụ: getPosts/, createPost/). Chạy npm install trong mỗi thư mục. Nén thư mục thành file .zip (bao gồm node_modules, index.mjs, package.json). Upload file .zip vào Lambda trong tab Code → Upload from → .zip file. Đảm bảo sử dụng ES Module (index.mjs) và handler là index.handler. File .zip phải bao gồm node_modules để tránh lỗi thiếu dependency. Environment variable TABLE_NAME phải khớp với tên bảng DynamoDB (BlogPosts).\n7. Kiểm tra Lambda Functions Trong giao diện mỗi function, chọn tab Test:\nĐối với getPosts, tạo event với JSON rỗng {}.\rĐối với createPost, tạo event mẫu:{\r\u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;postId\\\u0026#34;: \\\u0026#34;1\\\u0026#34;, \\\u0026#34;title\\\u0026#34;: \\\u0026#34;Test Post\\\u0026#34;, \\\u0026#34;content\\\u0026#34;: \\\u0026#34;This is a test post.\\\u0026#34;}\u0026#34;\r} Nhấn Test và kiểm tra kết quả: getPosts: Trả về danh sách bài viết (hoặc mảng rỗng nếu chưa có dữ liệu). createPost: Trả về thông báo { \u0026ldquo;message\u0026rdquo;: \u0026ldquo;Post created successfully\u0026rdquo; }. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/3-create-dynamodb-table/3.2-add-sample-data/",
	"title": "Thêm dữ liệu mẫu",
	"tags": [],
	"description": "",
	"content": "Vì sao cần thêm dữ liệu mẫu? Kiểm tra bảng: Thêm dữ liệu mẫu vào bảng BlogPosts giúp xác minh bảng hoạt động đúng trước khi tích hợp với Lambda functions. Kiểm tra truy vấn: Dữ liệu mẫu cho phép kiểm tra Lambda function getPosts trả về kết quả mong muốn. Hiểu cấu trúc dữ liệu: Giúp làm quen với cách dữ liệu được lưu trong DynamoDB. Các bước thực hiện: Truy cập AWS Management Console và vào dịch vụ Amazon DynamoDB. Trong danh sách Tables, chọn bảng BlogPosts. Chọn tab Explore table items. Chọn Create item. Thêm các thuộc tính: postId (String): 1 title (String): Sample Post content (String): This is a sample blog post. createdAt (String): 2025-08-20T12:00:00Z Nhấn Create item. Dữ liệu mẫu giúp kiểm tra Lambda function getPosts trả về kết quả đúng. Đảm bảo các thuộc tính (postId, title, content, createdAt) khớp với cấu trúc dự kiến trong Lambda functions. Nếu thêm nhiều mục, đảm bảo mỗi postId là duy nhất. Hoàn thành Bạn đã thêm dữ liệu mẫu vào bảng BlogPosts, sẵn sàng để kiểm tra với Lambda. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/5-configure-api-gateway/5.2-api-test-configuration/",
	"title": "Cấu hình và kiểm tra API",
	"tags": [],
	"description": "",
	"content": "Cấu hình API Gateway Trong phần này, chúng ta sẽ:\nThêm phương thức GET và POST cho resource /posts để truy xuất và thêm bài viết. Tích hợp với Lambda functions (getPosts, createPost). Bật CORS và triển khai API để sử dụng trong frontend. Kiểm tra API để đảm bảo hoạt động đúng. Lý do cần cấu hình và kiểm tra: Xử lý yêu cầu HTTP: Phương thức GET/POST cho phép frontend tương tác với backend. Tích hợp Lambda: Kết nối API với Lambda để xử lý logic nghiệp vụ. Kiểm tra hoạt động: Đảm bảo API trả về kết quả đúng trước khi tích hợp với frontend. Cấu hình và kiểm tra API Truy cập vào AWS Management Console và chọn API Gateway.\nMở API BlogAPI đã tạo ở bước trước.\nTạo phương thức GET cho /posts:\nTrong Resources, chọn resource /posts. Chọn Actions → Create Method. Chọn GET từ dropdown. Integration type: Chọn Lambda Function. Lambda Function: Chọn getPosts. Nhấn Save và xác nhận quyền IAM nếu được yêu cầu. Tạo phương thức POST cho /posts:\nLặp lại bước 3, nhưng chọn POST và tích hợp với function createPost. Cấu hình CORS:\nTrong Resources, chọn Actions → Enable CORS. Chấp nhận các giá trị mặc định và nhấn Enable CORS and replace existing CORS headers. Triển khai API:\nChọn Actions → Deploy API. Deployment stage: Chọn [New Stage] và đặt tên (ví dụ: prod). Nhấn Deploy. Lưu Invoke URL (ví dụ: https://gcnpmry3bd.execute-api.ap-southeast-1.amazonaws.com/prod). Đảm bảo bật CORS để frontend React/Vite có thể gửi yêu cầu đến API. Lưu Invoke URL để sử dụng trong frontend (bước 6). Kiểm tra quyền IAM của Lambda (lambda-blog-role) để đảm bảo API Gateway có thể gọi functions. Kiểm tra API:\nSử dụng Postman hoặc trình duyệt để test: GET \u0026lt;Invoke URL\u0026gt;/posts: Trả về danh sách bài viết từ DynamoDB. POST \u0026lt;Invoke URL\u0026gt;/posts với body: { \u0026#34;postId\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Test Post\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;This is a test post.\u0026#34; } Kiểm tra kết quả trong DynamoDB (tab Explore table items). Xác nhận và tiếp tục:\nAPI đã hoạt động và sẵn sàng kết nối với frontend. Ghi lại Invoke URL để sử dụng trong bước cấu hình frontend. Hoàn thành Bạn đã cấu hình và kiểm tra API để xử lý yêu cầu GET/POST. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/5-configure-api-gateway/5.1-create-rest-api/",
	"title": "Tạo REST API",
	"tags": [],
	"description": "",
	"content": "Amazon API Gateway Amazon API Gateway là một dịch vụ serverless cho phép tạo và quản lý các API RESTful hoặc WebSocket. Nó hoạt động như một cổng giao tiếp giữa frontend (React/Vite) và backend (Lambda functions), xử lý các yêu cầu HTTP và chuyển tiếp đến các dịch vụ AWS.\nAPI Gateway trong Workshop Trong phần này, chúng ta sẽ:\nTạo một REST API để xử lý các yêu cầu HTTP. Tạo resource /posts để hỗ trợ các endpoint cho bài viết. Đảm bảo API tích hợp với Lambda functions (getPosts, createPost) ở bước tiếp theo. Lý do chọn API Gateway: Serverless: Không cần quản lý máy chủ, tự động mở rộng theo lưu lượng truy cập. Tích hợp dễ dàng: Kết nối trực tiếp với Lambda và hỗ trợ các yêu cầu HTTP. Chi phí thấp: Free Tier cung cấp 1 triệu yêu cầu miễn phí mỗi tháng. Tạo REST API Truy cập vào AWS Management Console.\nTìm và chọn API Gateway. Chọn APIs trong menu điều hướng. Trong giao diện APIs:\nChọn Create API. Chọn REST API và nhấn Build. Trong giao diện Create API:\nAPI name: Nhập BlogAPI. Endpoint Type: Chọn Regional. Nhấn Create API. Tạo resource /posts:\nTrong Resources, chọn Actions → Create Resource. Resource Name: Nhập posts. Resource Path: /posts. Bật Enable API Gateway CORS (để frontend truy cập được). Nhấn Create Resource. Đảm bảo bật CORS để frontend React/Vite có thể gửi yêu cầu đến API. Lưu tên API (BlogAPI) và resource (/posts) để sử dụng ở bước tiếp theo. Hoàn thành Bạn đã tạo REST API và resource /posts, sẵn sàng để cấu hình phương thức GET/POST. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/5-configure-api-gateway/",
	"title": "Tạo REST API và cấu hình và kiểm tra API",
	"tags": [],
	"description": "",
	"content": "Cấu hình và kiểm tra API Trong phần lab này, chúng ta sẽ tạo REST API và cấu hình và kiểm tra API\nNội dung 5.1 Tạo REST API 5.2 Cấu hình và kiểm tra API "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/6-prepare-frontend-application/",
	"title": "Chuẩn bị ứng dụng Frontend",
	"tags": [],
	"description": "",
	"content": "\nỨng dụng Frontend Frontend của ứng dụng blog là một giao diện web được xây dựng bằng React và Vite, cho phép người dùng xem danh sách bài viết và tạo bài viết mới thông qua API Gateway. Frontend sẽ được host trên S3 và phân phối qua CloudFront (các bước sau).\nFrontend trong Workshop Trong phần này, chúng ta sẽ:\nTạo một dự án React/Vite. Cấu hình ứng dụng để gọi API Gateway (GET /posts, POST /posts). Thêm các thành phần giao diện cơ bản (danh sách bài viết, form tạo bài viết). Đóng gói ứng dụng để triển khai lên S3. Lợi ích khi sử dụng React/Vite: Hiệu suất cao: Vite cung cấp thời gian build nhanh và trải nghiệm phát triển mượt mà. Phổ biến: React có cộng đồng lớn, dễ dàng tích hợp với API RESTful. Tái sử dụng: Các component React giúp xây dựng giao diện linh hoạt và dễ bảo trì. Tương thích với S3/CloudFront: Dễ dàng triển khai ứng dụng tĩnh. Giá của Frontend Chi phí phát triển: Miễn phí (sử dụng công cụ mã nguồn mở như React, Vite). Chi phí triển khai: Tính trong S3 và CloudFront (bước 7, 8). Free Tier cung cấp: S3: 5GB lưu trữ, 20.000 yêu cầu GET, 2.000 yêu cầu PUT miễn phí/tháng. CloudFront: 1TB dữ liệu truyền đi/tháng miễn phí. Workshop này nên chọn cấu hình nào? Chúng ta sẽ sử dụng React với Vite vì: Vite có tốc độ build nhanh, phù hợp cho ứng dụng nhỏ như blog. React dễ tích hợp với API Gateway qua thư viện axios hoặc fetch. Cấu trúc đơn giản, dễ triển khai lên S3 dưới dạng static site. Chuẩn bị ứng dụng Frontend Cài đặt môi trường phát triển\nĐảm bảo đã cài Node.js (khuyến nghị phiên bản 20.x) và npm. Cài Vite và tạo dự án React: npm create vite@latest blog-frontend -- --template react cd blog-frontend npm install Cài đặt thư viện bổ sung\nCài axios để gọi API Gateway: npm install axios Cấu hình mã nguồn\nThay nội dung file src/App.jsx bằng mã sau để hiển thị danh sách bài viết và form tạo bài viết:\nimport { useState, useEffect } from \u0026#39;react\u0026#39;; import axios from \u0026#39;axios\u0026#39;; import \u0026#39;./App.css\u0026#39;; const API_URL = \u0026#39;\u0026lt;Invoke URL\u0026gt;/posts\u0026#39;; // Thay bằng Invoke URL từ bước 5 function App() { const [posts, setPosts] = useState([]); const [title, setTitle] = useState(\u0026#39;\u0026#39;); const [content, setContent] = useState(\u0026#39;\u0026#39;); // Lấy danh sách bài viết useEffect(() =\u0026gt; { axios.get(API_URL) .then(response =\u0026gt; setPosts(response.data)) .catch(error =\u0026gt; console.error(\u0026#39;Error fetching posts:\u0026#39;, error)); }, []); // Gửi bài viết mới const handleSubmit = async (e) =\u0026gt; { e.preventDefault(); try { await axios.post(API_URL, { postId: Date.now().toString(), title, content }); setTitle(\u0026#39;\u0026#39;); setContent(\u0026#39;\u0026#39;); // Làm mới danh sách bài viết const response = await axios.get(API_URL); setPosts(response.data); } catch (error) { console.error(\u0026#39;Error creating post:\u0026#39;, error); } }; return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Serverless Blog\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Create Post\u0026lt;/h2\u0026gt; \u0026lt;form onSubmit={handleSubmit}\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value={title} onChange={(e) =\u0026gt; setTitle(e.target.value)} placeholder=\u0026#34;Title\u0026#34; required /\u0026gt; \u0026lt;textarea value={content} onChange={(e) =\u0026gt; setContent(e.target.value)} placeholder=\u0026#34;Content\u0026#34; required /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Create Post\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;h2\u0026gt;Posts\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; {posts.map(post =\u0026gt; ( \u0026lt;li key={post.postId.S}\u0026gt; \u0026lt;h3\u0026gt;{post.title.S}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{post.content.S}\u0026lt;/p\u0026gt; \u0026lt;small\u0026gt;{post.createdAt.S}\u0026lt;/small\u0026gt; \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; Cập nhật file src/App.css để thêm style cơ bản:\nbody { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; } input, textarea { display: block; width: 100%; margin: 10px 0; padding: 8px; } button { padding: 8px 16px; background-color: #007bff; color: white; border: none; cursor: pointer; } button:hover { background-color: #0056b3; } ul { list-style: none; padding: 0; } li { margin-bottom: 20px; border-bottom: 1px solid #ddd; padding-bottom: 10px; } Cấu hình API URL\nThay \u0026lt;Invoke URL\u0026gt; trong src/App.jsx bằng Invoke URL từ bước 5 (API Gateway), ví dụ: https://\u0026lt;api-id\u0026gt;.execute-api.\u0026lt;region\u0026gt;.amazonaws.com/prod/posts. Kiểm tra ứng dụng\nChạy ứng dụng cục bộ:\nnpm run dev Mở trình duyệt tại http://localhost:5173 để kiểm tra:\nXem danh sách bài viết từ API Gateway (GET /posts). Tạo bài viết mới qua form (POST /posts). Nếu gặp lỗi (ví dụ: CORS hoặc API không phản hồi):\nKiểm tra Invoke URL và CORS trong API Gateway. Xem console log trong trình duyệt hoặc CloudWatch Logs của Lambda. Đóng gói ứng dụng\nBuild ứng dụng để tạo các file tĩnh: npm run build Kết quả sẽ nằm trong thư mục dist/, sẵn sàng để upload lên S3. Đảm bảo Invoke URL trong src/App.jsx khớp với URL từ API Gateway. Kiểm tra CORS trong API Gateway để tránh lỗi khi gọi API từ trình duyệt. File trong thư mục dist/ phải được upload lên S3 ở bước tiếp theo. Hoàn thành Bạn đã tạo và cấu hình ứng dụng frontend React/Vite, sẵn sàng để triển khai lên S3. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/7-host-frontend-on-s3/",
	"title": "Host Frontend trên S3",
	"tags": [],
	"description": "",
	"content": "\nAmazon S3 Amazon S3 (Simple Storage Service) là một dịch vụ lưu trữ đối tượng (object storage) của AWS, cho phép lưu trữ và phục vụ các file tĩnh như HTML, CSS, JavaScript, và hình ảnh. Trong dự án này, S3 được sử dụng để host ứng dụng frontend React/Vite dưới dạng static website.\nS3 trong Workshop Trong phần này, chúng ta sẽ:\nTạo một S3 bucket để lưu trữ các file tĩnh của ứng dụng frontend (thư mục dist/ từ bước 6). Bật tính năng Static website hosting trên S3. Upload các file tĩnh từ dự án React/Vite. Cấu hình quyền truy cập công khai để người dùng có thể truy cập website. Lợi ích khi sử dụng S3: Chi phí thấp: Free Tier cung cấp 5GB lưu trữ, 20.000 yêu cầu GET, và 2.000 yêu cầu PUT miễn phí mỗi tháng. Dễ triển khai: Hỗ trợ static website hosting, phù hợp với ứng dụng React/Vite. Tích hợp với CloudFront: Tăng tốc phân phối nội dung và hỗ trợ HTTPS (bước 8). Độ bền cao: Đảm bảo dữ liệu an toàn với độ bền 99.999999999%. Tạo và cấu hình S3 Bucket Truy cập AWS Management Console\nTìm và chọn S3 trong AWS Console. Tạo S3 Bucket\nTrong giao diện S3, chọn Buckets → Create bucket. Bucket name: Nhập tên duy nhất, ví dụ: blog-workshop-\u0026lt;your-account-id\u0026gt;. Region: Chọn cùng region với API Gateway (ví dụ: us-east-1). Object Ownership: Chọn ACLs disabled. Block Public Access settings: Tạm giữ nguyên mặc định (sẽ cập nhật sau). Nhấn Create bucket. Bật Static Website Hosting\nMở bucket vừa tạo, chọn tab Properties. Cuộn xuống Static website hosting, chọn Edit. Chọn Enable. Index document: Nhập index.html. Nhấn Save changes. Lưu Bucket website endpoint (ví dụ: http://blog-workshop-\u0026lt;your-account-id\u0026gt;.s3-website-\u0026lt;region\u0026gt;.amazonaws.com). Cấu hình quyền truy cập\nTrong tab Permissions, chọn Edit trong Block public access. Bỏ chọn Block all public access và các tùy chọn con, nhấn Save changes. Trong Bucket policy, chọn Edit và thêm policy sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::blog-workshop-\u0026lt;your-account-id\u0026gt;/*\u0026#34; } ] } Nhấn Save changes. Upload file frontend\nTrong thư mục code/frontend/ (từ bước 6), chạy lệnh build nếu chưa thực hiện: cd code/frontend npm run build Trong bucket, chọn Upload và upload toàn bộ thư mục dist/. Đảm bảo tất cả file (HTML, CSS, JS) được upload với Content-Type mặc định. Kiểm tra website\nTruy cập Bucket website endpoint trong trình duyệt (ví dụ: http://blog-workshop-\u0026lt;your-account-id\u0026gt;.s3-website-\u0026lt;region\u0026gt;.amazonaws.com). Kiểm tra giao diện hiển thị danh sách bài viết và form tạo bài viết. Nếu gặp lỗi (ví dụ: 403 Forbidden): Kiểm tra bucket policy và quyền public access. Xác minh Invoke URL trong src/App.jsx khớp với API Gateway. Kiểm tra console log trình duyệt hoặc CloudWatch Logs của Lambda. Tên bucket phải duy nhất trên toàn cầu (thêm \u0026lt;your-account-id\u0026gt; để tránh trùng lặp). Đảm bảo bucket policy cho phép s3:GetObject công khai. Lưu Bucket website endpoint để sử dụng trong bước cấu hình CloudFront. Hoàn thành Bạn đã tạo S3 bucket, bật static website hosting, và upload ứng dụng frontend. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/8-configure-cloudfront/",
	"title": "Amazon CloudFront",
	"tags": [],
	"description": "",
	"content": "Amazon CloudFront Amazon CloudFront là một dịch vụ CDN (Content Delivery Network) của AWS, giúp phân phối nội dung tĩnh (HTML, CSS, JavaScript) và động (API) với tốc độ cao và bảo mật HTTPS. Trong dự án này, CloudFront được sử dụng để phân phối ứng dụng frontend từ S3, cải thiện hiệu suất và thêm HTTPS.\nNội dung 8.1 Tạo CloudFront Distribution 8.2 Cập nhật và kiểm tra CloudFront "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/8-configure-cloudfront/8.1-create-cloudfront-distribution/",
	"title": "Tạo CloudFront Distribution",
	"tags": [],
	"description": "",
	"content": "Amazon CloudFront Amazon CloudFront là một dịch vụ CDN (Content Delivery Network) của AWS, giúp phân phối nội dung tĩnh (HTML, CSS, JavaScript) và động (API) với tốc độ cao và bảo mật HTTPS. Trong dự án này, CloudFront được sử dụng để phân phối ứng dụng frontend từ S3, cải thiện hiệu suất và thêm HTTPS.\nCloudFront trong Workshop Trong phần này, chúng ta sẽ:\nTạo một CloudFront distribution để phân phối nội dung từ S3 bucket. Cấu hình Origin Access Control (OAC) để bảo mật truy cập vào bucket. Đặt các thiết lập cơ bản như HTTPS và HTTP methods. Lợi ích khi sử dụng CloudFront: Tốc độ cao: Phân phối nội dung qua các edge locations toàn cầu. Bảo mật: Hỗ trợ HTTPS, tích hợp với AWS WAF (tùy chọn). Chi phí thấp: Free Tier cung cấp 1TB dữ liệu truyền đi mỗi tháng. Tích hợp với S3: Dễ dàng kết nối với bucket chứa file tĩnh. Tạo CloudFront Distribution Truy cập AWS Management Console\nTìm và chọn CloudFront trong AWS Console. Tạo Distribution\nTrong giao diện CloudFront, chọn Distributions → Create distribution. Cấu hình Distribution\nOrigin domain: Chọn S3 bucket đã tạo (ví dụ: blog-workshop-\u0026lt;your-account-id\u0026gt;).\nOrigin access: Chọn Origin access control settings (recommended).\nOrigin access control: Chọn Create new OAC.\nTrong Create new OAC, giữ mặc định và nhấn Create. Quay lại và chọn OAC vừa tạo. Viewer protocol policy: Chọn Redirect HTTP to HTTPS.\nAllowed HTTP methods: Chọn GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE.\nWeb Application Firewall (WAF): Chọn Do not enable security protections.\nCác phần còn lại giữ mặc định, cuộn xuống và nhấn Create distribution.\nChờ Distribution khởi tạo\nQuá trình khởi tạo mất khoảng 4-5 phút. Sau khi hoàn thành, ghi lại Distribution domain name (ví dụ: d1234567890abcdef.cloudfront.net). Đảm bảo chọn đúng S3 bucket làm origin. Lưu Distribution domain name để kiểm tra và sử dụng trong bước tiếp theo. OAC yêu cầu cập nhật bucket policy (sẽ thực hiện ở bước 8.2). Hoàn thành Bạn đã tạo CloudFront distribution để phân phối ứng dụng frontend. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/8-configure-cloudfront/8.2-check-cloudfront/",
	"title": "Cập nhật và kiểm tra CloudFront",
	"tags": [],
	"description": "",
	"content": "\nCập nhật và kiểm tra CloudFront Trong phần này, chúng ta sẽ:\nCập nhật bucket policy để CloudFront truy cập S3 thông qua Origin Access Control (OAC). Kiểm tra ứng dụng frontend qua CloudFront domain. Xác nhận website hoạt động với HTTPS. Lý do cần cập nhật và kiểm tra: Bảo mật: OAC giới hạn truy cập S3 chỉ qua CloudFront, tăng cường bảo mật. Xác nhận hoạt động: Đảm bảo website hiển thị đúng và API hoạt động qua HTTPS. Chuẩn bị hoàn thiện: Kết nối toàn bộ hệ thống (frontend, backend, CDN). Cập nhật và kiểm tra CloudFront Cập nhật Bucket Policy\nTruy cập S3 bucket (blog-workshop-\u0026lt;your-account-id\u0026gt;), chọn tab Permissions. Trong Bucket policy, chọn Edit và thay policy hiện tại bằng policy sau (thay \u0026lt;your-bucket-name\u0026gt; và \u0026lt;oac-id\u0026gt; bằng tên bucket và OAC ID từ bước 8.1): { \u0026#34;Version\u0026#34;: \u0026#34;2008-10-17\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;PolicyForCloudFrontPrivateContent\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity \u0026lt;oac-id\u0026gt;\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;your-bucket-name\u0026gt;/*\u0026#34; } ] } Nhấn Save changes. Tắt Public Access\nTrong Permissions, chọn Edit trong Block public access. Bật Block all public access và tất cả tùy chọn con, nhấn Save changes. Điều này đảm bảo chỉ CloudFront có thể truy cập bucket. Kiểm tra Website qua CloudFront\nTruy cập Distribution domain name từ bước 8.1 (ví dụ: https://d1234567890abcdef.cloudfront.net) trong trình duyệt. Kiểm tra giao diện hiển thị danh sách bài viết và form tạo bài viết. Thử tạo bài viết mới để xác nhận API Gateway hoạt động qua HTTPS. Debug lỗi (nếu có)\nNếu website không hiển thị: Kiểm tra bucket policy có đúng OAC ID và tên bucket. Xác minh file index.html tồn tại trong bucket. Nếu API không hoạt động: Kiểm tra Invoke URL trong src/App.jsx (bước 6). Xác minh CORS trong API Gateway (bước 5.2). Xem console log trình duyệt hoặc CloudWatch Logs của Lambda. Đảm bảo bucket policy sử dụng đúng OAC ID và tên bucket. Chỉ truy cập website qua Distribution domain name (HTTPS), không dùng Bucket website endpoint (HTTP). Nếu gặp lỗi 403, kiểm tra OAC và bucket policy. Hoàn thành Bạn đã cập nhật bucket policy và kiểm tra ứng dụng qua CloudFront với HTTPS. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/9-clean-up-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Sau khi hoàn thành hội thảo, việc dọn dẹp các tài nguyên AWS là điều cần thiết để tránh phát sinh chi phí ngoài phạm vi Free Tier. Phần này hướng dẫn bạn cách xóa các tài nguyên đã tạo: CloudFront, S3, API Gateway, Lambda, DynamoDB, và IAM.\nLý do để dọn dẹp: Tiết kiệm chi phí: Ngăn chặn các chi phí không cần thiết từ các tài nguyên không còn sử dụng. Bảo mật: Loại bỏ quyền IAM và các tài nguyên để tránh rủi ro truy cập trái phép. Quản Lý Sạch Sẽ: Giữ cho tài khoản AWS của bạn sạch sẽ cho các dự án trong tương lai. Dọn dẹp tài nguyên Xóa Phân phối CloudFront Truy cập CloudFront trong Bảng điều khiển Quản lý AWS. Chọn phân phối mà bạn đã tạo (ví dụ: d1234567890abcdef.cloudfront.net). Nhấp vào Vô hiệu hóa, chờ cho trạng thái chuyển sang Đã vô hiệu hóa. Nhấp vào Xóa để xóa phân phối. Xóa Bucket S3 Truy cập S3 trong AWS Management Console. Chọn bucket mà bạn đã tạo (ví dụ: blog-workshop-\u0026lt;mã-tài-khoản-của-bạn\u0026gt;). Nhấp vào Empty, nhập permanently delete để xác nhận, sau đó chọn Empty. Sau khi bucket trống, chọn Delete, nhập tên bucket vào hộp xác nhận, sau đó nhấp Delete bucket. Xóa API Gateway Truy cập API Gateway trong Bảng điều khiển Quản lý AWS. Chọn API BlogAPI. Chọn Actions → Delete, nhập tên API để xác nhận, sau đó nhấn Delete. Xóa các Hàm Lambda Vào Lambda trong AWS Management Console. Chọn hàm getPosts, nhấn Actions → Delete, xác nhận việc xóa. Lặp lại cho hàm createPost. Xóa Bảng DynamoDB Truy cập DynamoDB trong Bảng điều khiển quản lý AWS. Chọn bảng Posts. Nhấp Hành động → Xóa bảng, nhập tên bảng để xác nhận, sau đó nhấp Xóa. Xóa các tài nguyên IAM Vào IAM trong Bảng điều khiển quản lý AWS. Trong Policies, chọn chính sách lambda-blog-policy (hoặc tương tự), nhấp vào Delete, xác nhận việc xóa. Trong Roles, chọn vai trò lambda-blog-role, nhấp vào Delete, xác nhận việc xóa. Đảm bảo rằng bucket S3 trống trước khi xóa. Kiểm tra kỹ các tài nguyên để đảm bảo chúng không bị xóa nhầm từ dự án khác. Nếu gặp lỗi khi xóa (ví dụ: một tài nguyên đang được sử dụng), kiểm tra các phụ thuộc (chẳng hạn như quyền Lambda hoặc tích hợp API Gateway). Hoàn Thành Bạn đã xóa tất cả các tài nguyên liên quan đến hội thảo, đảm bảo không phát sinh chi phí. "
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://baoanh020603.github.io/aws-serverless-blog-workshop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]